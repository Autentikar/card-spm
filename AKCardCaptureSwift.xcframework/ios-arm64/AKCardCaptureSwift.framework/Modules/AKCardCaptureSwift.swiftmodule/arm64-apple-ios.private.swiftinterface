// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AKCardCaptureSwift
@_exported import AKCardCaptureSwift
import AKCoreSwift
import AVFoundation
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class CardCaptureCustomization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var showBackgroundImage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var backgroundImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var cardRecapture: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var customFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc public var customHeaderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc public var backgroundColorContainer: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var buttonCustomization: AKCardCaptureSwift.CardCaptureCustomization.Button {
    @objc get
    @objc set
  }
  @objc public var loadingScreenCustomization: AKCardCaptureSwift.CardCaptureCustomization.LoadingScreen {
    @objc get
    @objc set
  }
  @objc public var captureScreenCustomization: AKCardCaptureSwift.CardCaptureCustomization.CaptureScreen {
    @objc get
    @objc set
  }
  @objc public var bundleForLocalizableString: Foundation.Bundle? {
    @objc get
    @objc set
  }
  @objc @_inheritsConvenienceInitializers public class Button : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var backgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var disableBackgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var disableTextColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var textColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var textColorSecondary: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var customFont: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class LoadingScreen : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var showLogo: Swift.Bool {
      @objc get
      @objc set
    }
    @objc public var logo: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var showBackgroundImage: Swift.Bool {
      @objc get
      @objc set
    }
    @objc public var backgroundImage: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var backgroundColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var textColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var activityViewColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var customFont: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class CaptureScreen : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public var closeImage: UIKit.UIImage {
      @objc get
      @objc set
    }
    @objc public var referenceFrameColor: UIKit.UIColor {
      @objc get
      @objc set
    }
    @objc public var customFont: UIKit.UIFont? {
      @objc get
      @objc set
    }
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AKCardCapture : ObjectiveC.NSObject {
  @objc public static func setCustomization(customization: AKCardCaptureSwift.CardCaptureCustomization)
  @objc public static func getProtocol(step: AKCoreSwift.AKStepType) -> any AKCoreSwift.AKStepSharedRouterProtocol
  @objc override dynamic public init()
  @objc deinit
}
public enum CaptureDocType {
  case cardID
  case passport
  public typealias RawValue = Swift.String
  public var rawValue: AKCardCaptureSwift.CaptureDocType.RawValue {
    get
  }
  public init?(rawValue: AKCardCaptureSwift.CaptureDocType.RawValue)
  public static func == (a: AKCardCaptureSwift.CaptureDocType, b: AKCardCaptureSwift.CaptureDocType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AKCardCaptureSwift.CaptureDocType : Swift.Equatable {}
extension AKCardCaptureSwift.CaptureDocType : Swift.Hashable {}
